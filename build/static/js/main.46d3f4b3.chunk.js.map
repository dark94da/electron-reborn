{"version":3,"sources":["utils/generateOverlappingResult.ts","enums/StorageNameEnum.ts","utils/exportResult.ts","utils/stagingUtils.ts","hooks/useStagingLoader.ts","utils/readFromExcel.ts","tabs/Overlapping.tsx","tabs/Alias.tsx","utils/generateAliasResult.ts","tabs/Truncation.tsx","utils/generateTruncationResult.ts","tabs/Scramble.tsx","utils/generateScrambleResult.ts","App.js","index.js"],"names":["generateOverlappingResult","StorageNameEnum","pepStr","dnaStr","resLength","jump","isCyclic","arr","split","dnaArr","i","length","slice","cur","curStr","curDna","len","res","dnaRes","start","push","pepStrArr","dnaStrArr","dialog","window","require","remote","createCsvWriter","createObjectCsvWriter","exportResult","prefix","resArr","now","Date","filePath","showSaveDialogSync","showsTagField","defaultPath","getFullYear","getMonth","toString","padStart","getDate","filters","name","extensions","csvWriter","path","header","id","title","records","map","resStr","peptide","dna","batch","batchId","writeRecords","then","catch","storage","os","storageKey","value","setDataPath","tmpdir","set","remove","Promise","resolve","reject","get","error","data","setState","useEffect","stagingUtils","Error","Object","prototype","call","prev","stagingResult","xlsx","chosenFiles","showOpenDialogSync","inputArr","fileName","workSheetsFromFile","parse","basename","StyledTextField","styled","TextField","initialState","inputString","currentResult","selectedFile","Overlapping","useState","state","useStagingLoader","doExport","isStaging","className","jsx","placeholder","rows","variant","onChange","event","target","fullWidth","multiline","Button","style","marginRight","color","size","onClick","result","readFromExcel","join","display","justifyContent","required","label","type","parseInt","fontSize","Switch","checked","paddingTop","forEach","str","getResult","Divider","TableContainer","component","Paper","minHeight","maxHeight","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","idx","key","updatedStaging","concat","replaceCh","replaceDNA","Alias","replacePep","replaceDna","chs","temp","generateAliasResult","fromTail","Truncation","FormControl","InputLabel","Select","labelId","console","log","MenuItem","curEnd","curStart","generateTruncationResult","resultAmount","Scramble","pIdx","Math","floor","random","generateScrambleResult","useStyles","makeStyles","theme","backdrop","zIndex","drawer","btn","a11yProps","index","App","classes","isComputing","setIdx","Backdrop","open","addEndListener","CircularProgress","AppBar","position","Tabs","newValue","Tab","wrapped","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46d3f4b3.chunk.js","sourcesContent":["function generateOverlappingResult(\n    pepStr: string,\n    dnaStr: string,\n    resLength: number,\n    jump: number,\n    isCyclic: boolean\n): {\n    pepStrArr: string[];\n    dnaStrArr: string[];\n} {\n    const arr = pepStr.split('');\n    const dnaArr = [];\n    for (let i = 0; i < pepStr.length; i++) {\n        dnaArr[i] = dnaStr.slice(i * 3, (i + 1) * 3);\n    }\n    const len = arr.length;\n    const res = [];\n    const dnaRes = [];\n    let start = 0;\n    let cur, curStr, curDna;\n    while (start < len) {\n        cur = start;\n        if (!isCyclic && cur + resLength > len) {\n            break;\n        }\n        curStr = '';\n        curDna = '';\n        for (let i = 0; i < resLength; i++) {\n            curStr += arr[cur];\n            curDna += dnaArr[cur];\n            if (++cur === len) {\n                cur = 0;\n            }\n        }\n        res.push(curStr);\n        dnaRes.push(curDna);\n        start += jump;\n    }\n    return {\n        pepStrArr: res,\n        dnaStrArr: dnaRes,\n    };\n}\n\nexport default generateOverlappingResult;\n","enum StorageNameEnum {\n    Overlapping = 'ol',\n    Alias = 'al',\n    Truncation = 'tr',\n    Scramble = 'sc',\n}\n\nexport default StorageNameEnum;\n","const { dialog } = window.require('electron').remote;\nconst createCsvWriter = window.require('csv-writer').createObjectCsvWriter;\n\nexport interface ResItem {\n    res: string;\n    batchId: string;\n    dnaRes: string;\n}\n\nconst exportResult = ({ prefix, resArr }: { prefix: string; resArr: ResItem[] }) => {\n    const now = new Date();\n    const filePath = dialog.showSaveDialogSync({\n        showsTagField: false,\n        defaultPath: `${prefix}_${now.getFullYear()}${(now.getMonth() + 1)\n            .toString()\n            .padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}`,\n        filters: [\n            {\n                name: 'csv',\n                extensions: ['csv'],\n            },\n        ],\n    });\n    if (!filePath) {\n        return;\n    }\n    const csvWriter = createCsvWriter({\n        path: filePath,\n        header: [\n            { id: 'peptide', title: 'Peptide' },\n            { id: 'dna', title: 'DNA' },\n            { id: 'batch', title: 'BatchId' },\n        ],\n    });\n\n    const records = resArr.map((resStr) => ({\n        peptide: resStr.res,\n        dna: resStr.dnaRes,\n        batch: resStr.batchId,\n    }));\n\n    csvWriter\n        .writeRecords(records)\n        .then(() => {})\n        .catch(() => {});\n};\n\nexport default exportResult;\n","import StorageNameEnum from '../enums/StorageNameEnum';\n\nconst storage = window.require('electron-json-storage');\nconst os = window.require('os');\n\nexport default {\n    updateStaging: (storageKey: StorageNameEnum, value: object) => {\n        storage.setDataPath(os.tmpdir());\n        storage.set(storageKey, value);\n    },\n\n    clearStaging: (storageKey: StorageNameEnum) => {\n        storage.setDataPath(os.tmpdir());\n        storage.remove(storageKey);\n    },\n\n    retrieveStaging: (storageKey: StorageNameEnum): Promise<object> => {\n        storage.setDataPath(os.tmpdir());\n        return new Promise((resolve, reject) => {\n            storage.get(storageKey, (error: any, data: object) => {\n                if (error) reject(error);\n                resolve(data);\n            });\n        });\n    },\n};\n","import { useEffect } from 'react';\nimport stagingUtils from '../utils/stagingUtils';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { ResItem } from '../utils/exportResult';\n\nexport default function (\n    storageKey: StorageNameEnum,\n    setState: (f: (prev: object) => object) => void\n) {\n    useEffect(() => {\n        stagingUtils\n            .retrieveStaging(storageKey)\n            .then((res) => {\n                if (!res) throw new Error();\n                if (Object.prototype.toString.call(res) !== '[object Array]') throw new Error();\n                setState((prev) => ({\n                    ...prev,\n                    stagingResult: res as Array<ResItem>,\n                }));\n            })\n            .catch(() => {});\n    }, []);\n}\n","const xlsx = window.require('node-xlsx');\nconst { dialog } = window.require('electron').remote;\nconst path = window.require('path');\n\nexport default function (): {\n    inputArr: string[];\n    fileName: string;\n} {\n    const chosenFiles: string[] = dialog.showOpenDialogSync({\n        filters: [\n            {\n                name: 'xlsx',\n                extensions: ['xlsx', 'xls', 'xlsm'],\n            },\n        ],\n    });\n    if (!chosenFiles) {\n        return {\n            inputArr: [],\n            fileName: '',\n        };\n    }\n    const workSheetsFromFile = xlsx.parse(chosenFiles[0]);\n    if (!workSheetsFromFile) {\n        return {\n            inputArr: [],\n            fileName: '',\n        };\n    }\n    let start = 0;\n    if (workSheetsFromFile[0].data && workSheetsFromFile[0].data.length > 0) {\n        start = 1;\n    }\n    return {\n        inputArr: workSheetsFromFile[0].data.slice(start),\n        fileName: path.basename(chosenFiles[0]),\n    };\n}\n","import React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport styled from 'styled-components';\n\nimport generateOverlappingResult from '../utils/generateOverlappingResult';\nimport Switch from '@material-ui/core/Switch';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport stagingUtils from '../utils/stagingUtils';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\nconst initialState = {\n    inputString: '',\n    jump: 0,\n    length: 0,\n    batchId: '',\n    isCyclic: false,\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\ninterface StateProps {\n    inputString: string;\n    jump: number;\n    length: number;\n    batchId: string;\n    isCyclic: boolean;\n    currentResult: ResItem[];\n    stagingResult: ResItem[];\n    selectedFile: string;\n}\n\nfunction Overlapping() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Overlapping, setState);\n\n    const getResult = () => {\n        const result: ResItem[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            const [pepStr = '', dnaStr = '', batchId] = str.split(',');\n            const { pepStrArr, dnaStrArr } = generateOverlappingResult(\n                pepStr,\n                dnaStr,\n                state.length,\n                state.jump,\n                state.isCyclic\n            );\n            for (let i = 0; i < pepStrArr.length; i++) {\n                result.push({\n                    res: pepStrArr[i],\n                    dnaRes: dnaStrArr[i],\n                    batchId: batchId || state.batchId,\n                });\n            }\n        });\n        setState({\n            ...state,\n            currentResult: result,\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Overlapping, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Overlapping);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Overlapping,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgba(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"length\"\n                            type=\"number\"\n                            value={state.length || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    length: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"jump\"\n                            type=\"number\"\n                            value={state.jump || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    jump: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <div style={{ fontSize: '0.6rem', color: 'rgba(0, 0, 0, 0.54)' }}>\n                            <Switch\n                                checked={state.isCyclic}\n                                onChange={(event) => {\n                                    setState({\n                                        ...state,\n                                        isCyclic: event.target.checked,\n                                    });\n                                }}\n                                color=\"primary\"\n                            />\n                            isCyclic\n                        </div>\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Overlapping;\n","import React, { useState } from 'react';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport generateAliasResult from '../utils/generateAliasResult';\nimport styled from 'styled-components';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\nimport stagingUtils from '../utils/stagingUtils';\n\ninterface AliasProps {}\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\ninterface StateProps {\n    inputString: string;\n    replaceCh: string;\n    replaceDNA: string;\n    batchId: string;\n    currentResult: Array<ResItem>;\n    stagingResult: Array<ResItem>;\n    selectedFile: string;\n}\n\nconst initialState = {\n    inputString: '',\n    replaceCh: '',\n    replaceDNA: '',\n    batchId: '',\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\nfunction Alias() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Alias, setState);\n\n    const getResult = () => {\n        const result: ResItem[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            const [pepStr = '', dnaStr = '', batchId] = str.split(',');\n            const { pepStrArr, dnaStrArr } = generateAliasResult(\n                pepStr,\n                dnaStr,\n                state.replaceCh,\n                state.replaceDNA\n            );\n            for (let i = 0; i < pepStrArr.length; i++) {\n                result.push({\n                    res: pepStrArr[i],\n                    dnaRes: dnaStrArr[i],\n                    batchId: batchId || state.batchId,\n                });\n            }\n        });\n        setState({\n            ...state,\n            currentResult: result,\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Alias, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Alias);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Alias,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgb(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"Peptide replacement\"\n                            value={state.replaceCh || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    replaceCh: event.target.value,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"DNA replacement\"\n                            value={state.replaceDNA || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    replaceDNA: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Alias;\n","export default function (\n    pepStr: string,\n    dnaStr: string,\n    replacePep: string,\n    replaceDna: string\n): {\n    pepStrArr: string[];\n    dnaStrArr: string[];\n} {\n    const chs = pepStr.split('');\n    const dnaArr = [];\n    for (let i = 0; i < pepStr.length; i++) {\n        dnaArr[i] = dnaStr.slice(i * 3, (i + 1) * 3);\n    }\n    let cur = 0;\n    const res = [];\n    const dnaRes = [];\n    let temp;\n    while (cur < chs.length) {\n        if (chs[cur] === replacePep) {\n            cur++;\n            continue;\n        }\n        temp = chs[cur];\n        chs[cur] = replacePep;\n        res.push(chs.join(''));\n        chs[cur] = temp;\n        temp = dnaArr[cur];\n        dnaArr[cur] = replaceDna;\n        dnaRes.push(dnaArr.join(''));\n        dnaArr[cur] = temp;\n        cur++;\n    }\n    return {\n        pepStrArr: res,\n        dnaStrArr: dnaRes,\n    };\n}\n","import React, { useState } from 'react';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport styled from 'styled-components';\nimport generateTruncationResult from '../utils/generateTruncationResult';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\nimport stagingUtils from '../utils/stagingUtils';\n\ninterface TruncationProps {}\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\ninterface StateProps {\n    inputString: string;\n    jump: number;\n    fromTail: boolean;\n    batchId: string;\n    currentResult: Array<ResItem>;\n    stagingResult: Array<ResItem>;\n    selectedFile: string;\n}\n\nconst initialState = {\n    inputString: '',\n    jump: 0,\n    fromTail: false,\n    batchId: '',\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\nfunction Truncation() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Truncation, setState);\n\n    const getResult = () => {\n        const result: ResItem[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            const [pepStr = '', dnaStr = '', batchId] = str.split(',');\n            const { pepStrArr, dnaStrArr } = generateTruncationResult(\n                pepStr,\n                dnaStr,\n                state.jump,\n                state.fromTail\n            );\n            for (let i = 0; i < pepStrArr.length; i++) {\n                result.push({\n                    res: pepStrArr[i],\n                    dnaRes: dnaStrArr[i],\n                    batchId: batchId || state.batchId,\n                });\n            }\n        });\n        setState({\n            ...state,\n            currentResult: result,\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Truncation, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Truncation);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Truncation,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgb(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"jump\"\n                            type=\"number\"\n                            value={state.jump || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    jump: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <div style={{ fontSize: '0.6rem', color: 'rgba(0, 0, 0, 0.54)' }}>\n                            <FormControl>\n                                <InputLabel id=\"demo-simple-select-label\">Style</InputLabel>\n                                <Select\n                                    labelId=\"demo-simple-select-label\"\n                                    id=\"demo-simple-select\"\n                                    value={state.fromTail ? 'tail' : 'head'}\n                                    onChange={(event) => {\n                                        console.log(event.target.value);\n                                        setState({\n                                            ...state,\n                                            fromTail: event.target.value === 'tail',\n                                        });\n                                    }}>\n                                    <MenuItem value={'head'}>N Truncation</MenuItem>\n                                    <MenuItem value={'tail'}>C Truncation</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </div>\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Truncation;\n","export default function (\n    pepStr: string,\n    dnaStr: string,\n    len: number,\n    fromTail: boolean\n): {\n    pepStrArr: Array<string>;\n    dnaStrArr: Array<string>;\n} {\n    const res = [];\n    const dnaRes = [];\n    if (fromTail) {\n        let curEnd = pepStr.length;\n        while (curEnd >= len) {\n            res.push(pepStr.slice(0, curEnd - len));\n            dnaRes.push(dnaStr.slice(0, (curEnd - len) * 3));\n            curEnd -= len;\n        }\n    } else {\n        let curStart = 0;\n        while (curStart + len <= pepStr.length - 1) {\n            res.push(pepStr.slice(curStart + len));\n            dnaRes.push(dnaStr.slice((curStart + len) * 3));\n            curStart += len;\n        }\n    }\n    return {\n        pepStrArr: res,\n        dnaStrArr: dnaRes,\n    };\n}\n","import React, { useState } from 'react';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport styled from 'styled-components';\nimport generateScrambleResult from '../utils/generateScrambleResult';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\nimport stagingUtils from '../utils/stagingUtils';\n\ninterface ScrambleProps {}\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\ninterface StateProps {\n    inputString: string;\n    resultAmount: number;\n    batchId: string;\n    currentResult: Array<ResItem>;\n    stagingResult: Array<ResItem>;\n    selectedFile: string;\n}\n\nconst initialState = {\n    inputString: '',\n    resultAmount: 0,\n    batchId: '',\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\nfunction Scramble() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Scramble, setState);\n\n    const getResult = () => {\n        const result: ResItem[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            const [pepStr = '', dnaStr = '', batchId] = str.split(',');\n            const { pepStrArr, dnaStrArr } = generateScrambleResult(\n                pepStr,\n                dnaStr,\n                state.resultAmount\n            );\n            for (let i = 0; i < pepStrArr.length; i++) {\n                result.push({\n                    res: pepStrArr[i],\n                    dnaRes: dnaStrArr[i],\n                    batchId: batchId || state.batchId,\n                });\n            }\n        });\n        setState({\n            ...state,\n            currentResult: result,\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Scramble, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Scramble);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Scramble,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgb(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"result amount\"\n                            type=\"number\"\n                            value={state.resultAmount || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    resultAmount: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Peptide</TableCell>\n                                    <TableCell align=\"right\">DNA</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.dnaRes}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Scramble;\n","export default function (\n    pepStr: string,\n    dnaStr: string,\n    resultAmount: number\n): {\n    pepStrArr: Array<string>;\n    dnaStrArr: Array<string>;\n} {\n    const res = [];\n    const dnaRes = [];\n    let chs, dnaArr;\n    while (res.length < resultAmount) {\n        let idx, pIdx;\n        chs = pepStr.split('');\n        dnaArr = [];\n        for (let i = 0; i < pepStr.length; i++) {\n            dnaArr[i] = dnaStr.slice(i * 3, (i + 1) * 3);\n        }\n        for (let i = 0; i < chs.length - 1; i++) {\n            idx = Math.floor(Math.random() * (chs.length - i));\n            pIdx = chs.length - 1 - i;\n            [chs[idx], chs[pIdx]] = [chs[pIdx], chs[idx]];\n            [dnaArr[idx], dnaArr[pIdx]] = [dnaArr[pIdx], dnaArr[idx]];\n        }\n        res.push(chs.join(''));\n        dnaRes.push(dnaArr.join(''));\n    }\n    return {\n        pepStrArr: res,\n        dnaStrArr: dnaRes,\n    };\n}\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Overlapping from './tabs/Overlapping';\nimport Alias from './tabs/Alias';\nimport Truncation from './tabs/Truncation';\nimport Scramble from './tabs/Scramble';\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    btn: {\n        fontSize: '0.3rem',\n    },\n}));\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nfunction App() {\n    const classes = useStyles();\n    const [isComputing] = useState(false);\n    const [idx, setIdx] = useState(0);\n\n    return (\n        <div className=\"App\">\n            <Backdrop className={classes.backdrop} open={isComputing} addEndListener={() => {}}>\n                <CircularProgress color=\"inherit\" size=\"3rem\" />\n            </Backdrop>\n            <AppBar position=\"static\">\n                <Tabs\n                    value={idx}\n                    onChange={(event, newValue) => {\n                        setIdx(newValue);\n                    }}\n                    variant=\"fullWidth\"\n                    aria-label=\"wrapped full width tabs example\">\n                    <Tab label=\"Overlapping\" {...a11yProps(0)} />\n                    <Tab wrapped label=\"Ala Scanning\" {...a11yProps(1)} />\n                    <Tab label=\"Truncation\" {...a11yProps(2)} />\n                    <Tab label=\"Scramble\" {...a11yProps(3)} />\n                </Tabs>\n            </AppBar>\n            <div style={{ display: idx === 0 ? 'block' : 'none' }}>\n                <Overlapping />\n            </div>\n            <div style={{ display: idx === 1 ? 'block' : 'none' }}>\n                <Alias />\n            </div>\n            <div style={{ display: idx === 2 ? 'block' : 'none' }}>\n                <Truncation />\n            </div>\n            <div style={{ display: idx === 3 ? 'block' : 'none' }}>\n                <Scramble />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}