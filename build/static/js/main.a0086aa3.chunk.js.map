{"version":3,"sources":["App.js","utils/generateResult.js","index.js"],"names":["dialog","window","require","remote","createCsvWriter","createObjectCsvWriter","StyledTextField","styled","TextField","initialState","inputString","jump","undefined","length","replace","replaceWith","batchId","isComputing","result","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","btn","fontSize","App","useState","state","setState","classes","getResult","Promise","resolve","setTimeout","inputStr","split","index","parseInt","map","str","substr","forEach","push","apply","resLength","cur","curStr","arr","len","res","start","i","generateResult","getResultStringPromise","then","className","placeholder","value","rows","variant","onChange","event","target","fullWidth","multiline","style","display","justifyContent","required","label","type","paddingTop","Button","marginRight","size","onClick","Divider","TableContainer","component","Paper","minHeight","maxHeight","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","idx","key","now","Date","filePath","showSaveDialogSync","showsTagField","defaultPath","getFullYear","getMonth","toString","padStart","getDate","filters","name","extensions","csvWriter","path","header","id","title","records","resStr","no","output","batch","writeRecords","catch","Backdrop","open","addEndListener","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0086aa3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport styled from \"styled-components\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport './App.scss';\nimport Divider from \"@material-ui/core/Divider\";\nimport generateResult from \"./utils/generateResult\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst { dialog } = window.require('electron').remote;\nconst createCsvWriter = window.require('csv-writer').createObjectCsvWriter;\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n  .MuiInputBase-root {\n    margin-right: 1rem;\n    font-size: .8rem;\n  }\n\n  .MuiFormLabel-root {\n    font-size: .6rem;\n  }\n`;\n\nconst initialState = {\n    inputString: '',\n    jump: undefined,\n    length: undefined,\n    replace: '',\n    replaceWith: '',\n    batchId: '',\n    isComputing: false,\n    result: [],\n};\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    btn: {\n        fontSize: '0.3rem'\n    }\n}));\n\nfunction getResultStringPromise(state) {\n    return new Promise(resolve => {\n       setTimeout(() => {\n           const result = [];\n           let realInput = state.inputString;\n           let inputStr = realInput.split('\\n');\n           if (state.replace && state.replaceWith) {\n               let index = parseInt(state.replace, 10) - 1;\n               inputStr = inputStr.map(str => {\n                   if (index < str.length) {\n                       return str.substr(0, index) + state.replaceWith + str.substr(index + state.replaceWith.length);\n                   }\n                   return str;\n               });\n           }\n           inputStr.forEach(str => {\n               result.push.apply(result, generateResult(str, parseInt(state.length,10), parseInt(state.jump, 10)));\n           });\n           resolve(result);\n       });\n    });\n}\n\nfunction App() {\n    const [state, setState] = useState(initialState);\n\n    const classes = useStyles();\n\n    const getResult = () => {\n        if (state.isComputing) {\n            return;\n        }\n        setState({\n            ...state,\n            isComputing: true\n        });\n        getResultStringPromise(state)\n            .then(result => setState({\n                ...state,\n                result,\n                isComputing: false\n            }));\n    };\n\n    const exportResult = () => {\n        const now = new Date();\n        const filePath = dialog.showSaveDialogSync({\n            showsTagField: false,\n            defaultPath: `output_${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}`,\n            filters: [\n                {\n                    name: 'csv',\n                    extensions: ['csv']\n                }\n            ]\n        });\n        if (!filePath) {\n            return;\n        }\n        const csvWriter = createCsvWriter({\n            path: filePath,\n            header: [\n                {id: 'no', title: 'No.'},\n                {id: 'output', title: 'Output'},\n                {id: 'batch', title: 'BatchId'}\n            ]\n        });\n\n        const records = state.result.map((resStr, idx) => (\n            {no: idx, output: resStr, batch: state.batchId}\n        ));\n\n        csvWriter.writeRecords(records)\n            .then(() => {\n            })\n            .catch(() => {\n\n            })\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">\n                        Input\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={2}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"length\"\n                            type=\"number\"\n                            value={state.length}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    length: event.target.value\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"jump\"\n                            type=\"number\"\n                            value={state.jump}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    jump: event.target.value\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value\n                                });\n                            }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <StyledTextField\n                            label=\"replace position\"\n                            value={state.replace}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    replace: event.target.value\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            label=\"replace with\"\n                            value={state.replaceWith}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    replaceWith: event.target.value\n                                });\n                            }}\n                        />\n                    </div>\n                    <div style={{\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        paddingTop: '0.8rem'\n                    }}>\n                        <Button\n                            classes={classes.btn}\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}\n                        >generate</Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                    length: 0,\n                                    jump: 0\n                                });\n                            }}\n                        >reset</Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">\n                        Output\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <TableContainer component={Paper} style={{ minHeight: '10rem', maxHeight: '10rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.result.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">\n                                            {res}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{state.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            variant=\"outlined\"\n                            onClick={exportResult}\n                        >export</Button>\n                    </div>\n                </div>\n            </div>\n            <Backdrop className={classes.backdrop} open={state.isComputing} addEndListener={() => {}}>\n                <CircularProgress color=\"inherit\" size=\"3rem\" />\n            </Backdrop>\n        </div>\n    );\n}\n\nexport default App;\n","export default function generateResult (inputString, resLength, jump) {\n    const arr = inputString.split('');\n    const len = arr.length;\n    const res = [];\n    let start = 0;\n    let cur, curStr;\n    while (start < len) {\n        cur = start;\n        curStr = '';\n        for (let i = 0; i < resLength; i++) {\n            curStr += arr[cur];\n            if (++cur === len) {\n                cur = 0;\n            }\n        }\n        res.push(curStr);\n        start += jump;\n    }\n    return res;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}