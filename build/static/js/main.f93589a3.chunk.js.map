{"version":3,"sources":["enums/StorageNameEnum.ts","utils/exportResult.ts","utils/stagingUtils.ts","hooks/useStagingLoader.ts","utils/readFromExcel.ts","tabs/Overlapping.tsx","utils/generateOverlappingResult.ts","tabs/Alias.tsx","utils/generateAliasResult.ts","tabs/Truncation.tsx","utils/generateTruncationResult.ts","tabs/Scramble.tsx","utils/generateScrambleResult.ts","App.js","index.js"],"names":["StorageNameEnum","dialog","window","require","remote","createCsvWriter","createObjectCsvWriter","exportResult","prefix","resArr","now","Date","filePath","showSaveDialogSync","showsTagField","defaultPath","getFullYear","getMonth","toString","padStart","getDate","filters","name","extensions","csvWriter","path","header","id","title","records","map","resStr","idx","no","output","res","batch","batchId","writeRecords","then","catch","storage","os","storageKey","value","setDataPath","tmpdir","set","remove","Promise","resolve","reject","get","error","data","setState","useEffect","stagingUtils","Error","Object","prototype","call","prev","stagingResult","xlsx","chosenFiles","showOpenDialogSync","inputArr","fileName","workSheetsFromFile","parse","basename","StyledTextField","styled","TextField","initialState","inputString","jump","length","isCyclic","currentResult","selectedFile","Overlapping","useState","state","useStagingLoader","doExport","isStaging","className","jsx","placeholder","rows","variant","onChange","event","target","fullWidth","multiline","Button","style","marginRight","color","size","onClick","result","readFromExcel","join","display","justifyContent","required","label","type","parseInt","fontSize","Switch","checked","paddingTop","split","forEach","str","push","apply","resLength","cur","curStr","arr","len","start","i","generateOverlappingResult","getResult","Divider","TableContainer","component","Paper","minHeight","maxHeight","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","updatedStaging","concat","replaceCh","Alias","inputStr","temp","chs","generateAliasResult","fromTail","Truncation","FormControl","InputLabel","Select","labelId","console","log","MenuItem","curEnd","slice","curStart","generateTruncationResult","resultAmount","Scramble","Math","floor","random","generateScrambleResult","useStyles","makeStyles","theme","backdrop","zIndex","drawer","btn","a11yProps","index","App","classes","isComputing","setIdx","Backdrop","open","addEndListener","CircularProgress","AppBar","position","Tabs","newValue","Tab","wrapped","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f93589a3.chunk.js","sourcesContent":["enum StorageNameEnum {\n    Overlapping = 'ol',\n    Alias = 'al',\n    Truncation = 'tr',\n    Scramble = 'sc',\n}\n\nexport default StorageNameEnum;\n","const { dialog } = window.require('electron').remote;\nconst createCsvWriter = window.require('csv-writer').createObjectCsvWriter;\n\nexport interface ResItem {\n    res: string;\n    batchId: string;\n}\n\nconst exportResult = ({ prefix, resArr }: { prefix: string; resArr: ResItem[] }) => {\n    const now = new Date();\n    const filePath = dialog.showSaveDialogSync({\n        showsTagField: false,\n        defaultPath: `${prefix}_${now.getFullYear()}${(now.getMonth() + 1)\n            .toString()\n            .padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}`,\n        filters: [\n            {\n                name: 'csv',\n                extensions: ['csv'],\n            },\n        ],\n    });\n    if (!filePath) {\n        return;\n    }\n    const csvWriter = createCsvWriter({\n        path: filePath,\n        header: [\n            { id: 'no', title: 'No.' },\n            { id: 'batch', title: 'BatchId' },\n            { id: 'output', title: 'Output' },\n        ],\n    });\n\n    const records = resArr.map((resStr, idx) => ({\n        no: idx,\n        output: resStr.res,\n        batch: resStr.batchId,\n    }));\n\n    csvWriter\n        .writeRecords(records)\n        .then(() => {})\n        .catch(() => {});\n};\n\nexport default exportResult;\n","import StorageNameEnum from '../enums/StorageNameEnum';\n\nconst storage = window.require('electron-json-storage');\nconst os = window.require('os');\n\nexport default {\n    updateStaging: (storageKey: StorageNameEnum, value: object) => {\n        storage.setDataPath(os.tmpdir());\n        storage.set(storageKey, value);\n    },\n\n    clearStaging: (storageKey: StorageNameEnum) => {\n        storage.setDataPath(os.tmpdir());\n        storage.remove(storageKey);\n    },\n\n    retrieveStaging: (storageKey: StorageNameEnum): Promise<object> => {\n        storage.setDataPath(os.tmpdir());\n        return new Promise((resolve, reject) => {\n            storage.get(storageKey, (error: any, data: object) => {\n                if (error) reject(error);\n                resolve(data);\n            });\n        });\n    },\n};\n","import { useEffect } from 'react';\nimport stagingUtils from '../utils/stagingUtils';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { ResItem } from '../utils/exportResult';\n\nexport default function (\n    storageKey: StorageNameEnum,\n    setState: (f: (prev: object) => object) => void\n) {\n    useEffect(() => {\n        stagingUtils\n            .retrieveStaging(storageKey)\n            .then((res) => {\n                if (!res) throw new Error();\n                if (Object.prototype.toString.call(res) !== '[object Array]') throw new Error();\n                setState((prev) => ({\n                    ...prev,\n                    stagingResult: res as Array<ResItem>,\n                }));\n            })\n            .catch(() => {});\n    }, []);\n}\n","const xlsx = window.require('node-xlsx');\nconst { dialog } = window.require('electron').remote;\nconst path = window.require('path');\n\nexport default function (): {\n    inputArr: string[];\n    fileName: string;\n} {\n    const chosenFiles: string[] = dialog.showOpenDialogSync({\n        filters: [\n            {\n                name: 'xlsx',\n                extensions: ['xlsx', 'xls', 'xlsm'],\n            },\n        ],\n    });\n    if (!chosenFiles) {\n        return {\n            inputArr: [],\n            fileName: '',\n        };\n    }\n    const workSheetsFromFile = xlsx.parse(chosenFiles[0]);\n    if (!workSheetsFromFile) {\n        return {\n            inputArr: [],\n            fileName: '',\n        };\n    }\n    return {\n        inputArr: [...workSheetsFromFile[0].data],\n        fileName: path.basename(chosenFiles[0]),\n    };\n}\n","import React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport styled from 'styled-components';\n\nimport generateOverlappingResult from '../utils/generateOverlappingResult';\nimport Switch from '@material-ui/core/Switch';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport stagingUtils from '../utils/stagingUtils';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\nconst initialState = {\n    inputString: '',\n    jump: 0,\n    length: 0,\n    batchId: '',\n    isCyclic: false,\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\ninterface OverlappingProps {}\n\ninterface StateProps {\n    inputString: string;\n    jump: number;\n    length: number;\n    batchId: string;\n    isCyclic: boolean;\n    currentResult: Array<ResItem>;\n    stagingResult: Array<ResItem>;\n    selectedFile: string;\n}\n\nfunction Overlapping() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Overlapping, setState);\n\n    const getResult = () => {\n        const result: string[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            result.push.apply(\n                result,\n                generateOverlappingResult(str, state.length, state.jump, state.isCyclic)\n            );\n        });\n        setState({\n            ...state,\n            currentResult: result.map((res) => ({\n                res: res,\n                batchId: state.batchId,\n            })),\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Overlapping, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Overlapping);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Overlapping,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgba(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"length\"\n                            type=\"number\"\n                            value={state.length || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    length: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"jump\"\n                            type=\"number\"\n                            value={state.jump || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    jump: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <div style={{ fontSize: '0.6rem', color: 'rgba(0, 0, 0, 0.54)' }}>\n                            <Switch\n                                checked={state.isCyclic}\n                                onChange={(event) => {\n                                    setState({\n                                        ...state,\n                                        isCyclic: event.target.checked,\n                                    });\n                                }}\n                                color=\"primary\"\n                            />\n                            isCyclic\n                        </div>\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Overlapping;\n","export default function generateOverlappingResult(\n    inputString: string,\n    resLength: number,\n    jump: number,\n    isCyclic: boolean\n): Array<string> {\n    const arr = inputString.split('');\n    const len = arr.length;\n    const res = [];\n    let start = 0;\n    let cur, curStr;\n    while (start < len) {\n        cur = start;\n        if (!isCyclic && cur + resLength >= len) {\n            break;\n        }\n        curStr = '';\n        for (let i = 0; i < resLength; i++) {\n            curStr += arr[cur];\n            if (++cur === len) {\n                cur = 0;\n            }\n        }\n        res.push(curStr);\n        start += jump;\n    }\n    return res;\n}\n","import React, { useState } from 'react';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport generateAliasResult from '../utils/generateAliasResult';\nimport styled from 'styled-components';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\nimport stagingUtils from '../utils/stagingUtils';\n\ninterface AliasProps {}\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\ninterface StateProps {\n    inputString: string;\n    replaceCh: string;\n    batchId: string;\n    currentResult: Array<ResItem>;\n    stagingResult: Array<ResItem>;\n    selectedFile: string;\n}\n\nconst initialState = {\n    inputString: '',\n    replaceCh: '',\n    batchId: '',\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\nfunction Alias() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Alias, setState);\n\n    const getResult = () => {\n        const result: string[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            result.push.apply(result, generateAliasResult(str, state.replaceCh));\n        });\n        setState({\n            ...state,\n            currentResult: result.map((res) => ({\n                res: res,\n                batchId: state.batchId,\n            })),\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Alias, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Alias);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Alias,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgb(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"replace with\"\n                            value={state.replaceCh || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    replaceCh: event.target.value,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Alias;\n","export default function (inputStr: string, replaceCh: string): Array<string> {\n    const chs = inputStr.split('');\n    let cur = 0;\n    const res = [];\n    let temp;\n    while (cur < chs.length) {\n        if (chs[cur] === replaceCh) {\n            cur++;\n            continue;\n        }\n        temp = chs[cur];\n        chs[cur] = replaceCh;\n        res.push(chs.join(''));\n        chs[cur] = temp;\n        cur++;\n    }\n    return res;\n}\n","import React, { useState } from 'react';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport styled from 'styled-components';\nimport generateTruncationResult from '../utils/generateTruncationResult';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\nimport stagingUtils from '../utils/stagingUtils';\n\ninterface TruncationProps {}\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\ninterface StateProps {\n    inputString: string;\n    jump: number;\n    fromTail: boolean;\n    batchId: string;\n    currentResult: Array<ResItem>;\n    stagingResult: Array<ResItem>;\n    selectedFile: string;\n}\n\nconst initialState = {\n    inputString: '',\n    jump: 0,\n    fromTail: false,\n    batchId: '',\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\nfunction Truncation() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Truncation, setState);\n\n    const getResult = () => {\n        const result: string[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            result.push.apply(result, generateTruncationResult(str, state.jump, state.fromTail));\n        });\n        setState({\n            ...state,\n            currentResult: result.map((res) => ({\n                res: res,\n                batchId: state.batchId,\n            })),\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Truncation, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Truncation);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Truncation,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgb(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"jump\"\n                            type=\"number\"\n                            value={state.jump || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    jump: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <div style={{ fontSize: '0.6rem', color: 'rgba(0, 0, 0, 0.54)' }}>\n                            <FormControl>\n                                <InputLabel id=\"demo-simple-select-label\">Style</InputLabel>\n                                <Select\n                                    labelId=\"demo-simple-select-label\"\n                                    id=\"demo-simple-select\"\n                                    value={state.fromTail ? 'tail' : 'head'}\n                                    onChange={(event) => {\n                                        console.log(event.target.value);\n                                        setState({\n                                            ...state,\n                                            fromTail: event.target.value === 'tail',\n                                        });\n                                    }}>\n                                    <MenuItem value={'head'}>N Truncation</MenuItem>\n                                    <MenuItem value={'tail'}>C Truncation</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </div>\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Truncation;\n","export default function (inputStr: string, len: number, fromTail: boolean): Array<string> {\n    const res = [];\n    if (fromTail) {\n        let curEnd = inputStr.length;\n        while (curEnd >= len) {\n            res.push(inputStr.slice(0, curEnd - len));\n            curEnd -= len;\n        }\n    } else {\n        let curStart = 0;\n        while (curStart + len <= inputStr.length - 1) {\n            res.push(inputStr.slice(curStart + len));\n            curStart += len;\n        }\n    }\n    return res;\n}\n","import React, { useState } from 'react';\nimport exportResult, { ResItem } from '../utils/exportResult';\nimport StorageNameEnum from '../enums/StorageNameEnum';\nimport { Button, TextField } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport styled from 'styled-components';\nimport generateScrambleResult from '../utils/generateScrambleResult';\nimport useStagingLoader from '../hooks/useStagingLoader';\nimport readFromExcel from '../utils/readFromExcel';\nimport stagingUtils from '../utils/stagingUtils';\n\ninterface ScrambleProps {}\n\n// language=SCSS\nconst StyledTextField = styled(TextField)`\n    .MuiInputBase-root {\n        margin-right: 1rem;\n        font-size: 0.8rem;\n    }\n\n    .MuiFormLabel-root {\n        font-size: 0.6rem;\n    }\n`;\n\ninterface StateProps {\n    inputString: string;\n    resultAmount: number;\n    batchId: string;\n    currentResult: Array<ResItem>;\n    stagingResult: Array<ResItem>;\n    selectedFile: string;\n}\n\nconst initialState = {\n    inputString: '',\n    resultAmount: 0,\n    batchId: '',\n    currentResult: [],\n    stagingResult: [],\n    selectedFile: '',\n};\n\nfunction Scramble() {\n    const [state, setState] = useState<StateProps>(initialState);\n\n    // @ts-ignore\n    useStagingLoader(StorageNameEnum.Scramble, setState);\n\n    const getResult = () => {\n        const result: string[] = [];\n        state.inputString.split('\\n').forEach((str) => {\n            result.push.apply(result, generateScrambleResult(str, state.resultAmount));\n        });\n        setState({\n            ...state,\n            currentResult: result.map((res) => ({\n                res: res,\n                batchId: state.batchId,\n            })),\n        });\n    };\n\n    const saveToStaging = () => {\n        const updatedStaging = state.stagingResult.concat(state.currentResult);\n\n        setState({\n            ...state,\n            stagingResult: updatedStaging,\n            currentResult: [],\n        });\n        stagingUtils.updateStaging(StorageNameEnum.Scramble, updatedStaging);\n    };\n\n    const clearStaging = () => {\n        setState({\n            ...state,\n            stagingResult: [],\n        });\n        stagingUtils.clearStaging(StorageNameEnum.Scramble);\n    };\n\n    const doExport = (isStaging: boolean) => {\n        exportResult({\n            prefix: StorageNameEnum.Scramble,\n            resArr: isStaging ? state.stagingResult : state.currentResult,\n        });\n    };\n\n    const openFile = () => {\n        const result = readFromExcel();\n        if (!result.fileName) return;\n        setState({\n            ...state,\n            selectedFile: result.fileName,\n            inputString: result.inputArr.join('\\n'),\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <style jsx>\n                {\n                    //language=SCSS\n                    `\n                        .input-area,\n                        .output-area {\n                            position: relative;\n                            display: flex;\n                            justify-content: center;\n                            align-items: flex-start;\n                            padding: 1rem 0;\n                        }\n\n                        .left-column {\n                            width: 10%;\n                        }\n\n                        .label {\n                            font-size: 1rem;\n                        }\n\n                        .right-column {\n                            width: 40%;\n                            margin-right: 1rem;\n                        }\n\n                        .text-area {\n                            width: 100%;\n                            margin-bottom: 0.5rem;\n                        }\n\n                        .result-area {\n                            min-height: 10rem;\n                            overflow: scroll;\n                        }\n\n                        .export-btn {\n                            margin-top: 0.8rem;\n                        }\n\n                        .title {\n                            text-align: center;\n                            background-color: rgb(0, 0, 0, 0.14);\n                            margin-top: 0;\n                            line-height: 1.5;\n                            margin-bottom: 0.5rem;\n                        }\n                        .input-file-area {\n                            display: flex;\n                            align-items: center;\n                            color: rgba(0, 0, 0, 0.7);\n                        }\n                    `\n                }\n            </style>\n            <div className=\"input-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Input</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"text-area\">\n                        <StyledTextField\n                            placeholder={'Please type input string here.'}\n                            value={state.inputString}\n                            rows={4}\n                            variant={'outlined'}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    inputString: event.target.value,\n                                });\n                            }}\n                            fullWidth\n                            multiline\n                        />\n                    </div>\n                    <div className=\"input-file-area\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={openFile}>\n                            OpenFile\n                        </Button>\n                        <div className=\"selected-file\">{state.selectedFile}</div>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\n                        <StyledTextField\n                            required\n                            label=\"result amount\"\n                            type=\"number\"\n                            value={state.resultAmount || ''}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    resultAmount: parseInt(event.target.value, 10) || 0,\n                                });\n                            }}\n                        />\n                        <StyledTextField\n                            required\n                            label=\"batch id\"\n                            value={state.batchId}\n                            onChange={(event) => {\n                                setState({\n                                    ...state,\n                                    batchId: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            paddingTop: '0.8rem',\n                        }}>\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            color=\"primary\"\n                            size=\"small\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                getResult();\n                            }}>\n                            generate\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            onClick={() => {\n                                setState({\n                                    ...initialState,\n                                });\n                            }}>\n                            reset\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"output-area\">\n                <div className=\"left-column\">\n                    <div className=\"label\">Output</div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Current Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.currentResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(false);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={saveToStaging}>\n                            save to staging\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"right-column\">\n                    <div className=\"title\">Staging Result</div>\n                    <TableContainer\n                        component={Paper}\n                        style={{ minHeight: '15rem', maxHeight: '15rem' }}>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">No.</TableCell>\n                                    <TableCell align=\"right\">Result String</TableCell>\n                                    <TableCell align=\"right\">Batch ID</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {state.stagingResult.map((res, idx) => (\n                                    <TableRow key={idx}>\n                                        <TableCell align=\"left\">{idx + 1}</TableCell>\n                                        <TableCell align=\"right\">{res.res}</TableCell>\n                                        <TableCell align=\"right\">{res.batchId}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <div className=\"export-btn\">\n                        <Button\n                            style={{ marginRight: '0.5rem' }}\n                            size=\"small\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                doExport(true);\n                            }}>\n                            export\n                        </Button>\n                        <Button size=\"small\" variant=\"outlined\" onClick={clearStaging}>\n                            clear staging\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Scramble;\n","export default function (inputStr: string, resultAmount: number): Array<string> {\n    const res = [];\n    let chs;\n    while (res.length < resultAmount) {\n        let idx;\n        chs = inputStr.split('');\n        for (let i = 0; i < chs.length - 1; i++) {\n            idx = Math.floor(Math.random() * (chs.length - i));\n            [chs[idx], chs[chs.length - 1 - i]] = [chs[chs.length - 1 - i], chs[idx]];\n        }\n        res.push(chs.join(''));\n    }\n    return res;\n}\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Overlapping from './tabs/Overlapping';\nimport Alias from './tabs/Alias';\nimport Truncation from './tabs/Truncation';\nimport Scramble from './tabs/Scramble';\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    btn: {\n        fontSize: '0.3rem',\n    },\n}));\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nfunction App() {\n    const classes = useStyles();\n    const [isComputing, setIsComputing] = useState(false);\n    const [idx, setIdx] = useState(0);\n\n    return (\n        <div className=\"App\">\n            <Backdrop className={classes.backdrop} open={isComputing} addEndListener={() => {}}>\n                <CircularProgress color=\"inherit\" size=\"3rem\" />\n            </Backdrop>\n            <AppBar position=\"static\">\n                <Tabs\n                    value={idx}\n                    onChange={(event, newValue) => {\n                        setIdx(newValue);\n                    }}\n                    variant=\"fullWidth\"\n                    aria-label=\"wrapped full width tabs example\">\n                    <Tab label=\"Overlapping\" {...a11yProps(0)} />\n                    <Tab wrapped label=\"Ala Scanning\" {...a11yProps(1)} />\n                    <Tab label=\"Truncation\" {...a11yProps(2)} />\n                    <Tab label=\"Scramble\" {...a11yProps(3)} />\n                </Tabs>\n            </AppBar>\n            {idx === 0 && <Overlapping />}\n            {idx === 1 && <Alias />}\n            {idx === 2 && <Truncation />}\n            {idx === 3 && <Scramble />}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}